import { useState } from 'react';
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { AIGeneratedContent } from "@/components/common/AIGeneratedContent";

interface FinancialAnalysisDisplayProps {
  title: string;
  description?: string;
  data: any;
  onAnalyze: () => Promise<{ analysis: string; recommendations: string } | null>;
}

export function FinancialAnalysisDisplay({
  title,
  description,
  data, // Used for validation in the handleAnalyze function
  onAnalyze
}: FinancialAnalysisDisplayProps) {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [analysisResult, setAnalysisResult] = useState<{ analysis: string; recommendations: string } | null>(null);

  const handleAnalyze = async () => {
    setLoading(true);
    setError(null);
    
    // Validate that we have data to analyze
    if (!data || (typeof data === 'object' && Object.keys(data).length === 0)) {
      setError("No data available for analysis. Please enter financial data first.");
      setLoading(false);
      return;
    }
    
    try {
      const result = await onAnalyze();
      if (result) {
        setAnalysisResult(result);
      } else {
        setError("Failed to generate analysis. Please try again.");
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : "An unexpected error occurred");
    } finally {
      setLoading(false);
    }
  };

  const handleCopy = () => {
    if (!analysisResult) return;
    
    const content = `# ${title} Analysis\n\n## Analysis\n${analysisResult.analysis}\n\n## Recommendations\n${analysisResult.recommendations}`;
    
    navigator.clipboard.writeText(content)
      .then(() => {
        // You could add a toast notification here
        console.log('Content copied to clipboard');
      })
      .catch(err => {
        console.error('Failed to copy content: ', err);
      });
  };

  const handlePrint = () => {
    const printWindow = window.open('', '_blank');
    if (!printWindow || !analysisResult) return;

    const content = `
      <!DOCTYPE html>
      <html>
      <head>
        <title>${title} Analysis</title>
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; max-width: 800px; margin: 0 auto; padding: 20px; }
          h1 { color: #2563eb; }
          h2 { color: #4b5563; border-bottom: 1px solid #e5e7eb; padding-bottom: 8px; }
          .section { margin-bottom: 30px; }
          .footer { margin-top: 40px; font-size: 12px; color: #6b7280; text-align: center; }
        </style>
      </head>
      <body>
        <h1>${title} Analysis</h1>
        <div class="section">
          <h2>Analysis</h2>
          ${analysisResult.analysis.replace(/\n/g, '<br>')}
        </div>
        <div class="section">
          <h2>Recommendations</h2>
          ${analysisResult.recommendations.replace(/\n/g, '<br>')}
        </div>
        <div class="footer">
          Generated by Intellisync Business Suite on ${new Date().toLocaleDateString()}
        </div>
      </body>
      </html>
    `;

    printWindow.document.open();
    printWindow.document.write(content);
    printWindow.document.close();
    printWindow.print();
  };

  return (
    <div className="space-y-4">
      {!analysisResult ? (
        <Card>
          <CardHeader>
            <CardTitle>{title}</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="mb-4">{description || "Generate AI-powered insights based on your financial data."}</p>
            <Button 
              onClick={handleAnalyze} 
              disabled={loading}
              className="w-full"
            >
              {loading ? "Analyzing..." : "Generate Analysis"}
            </Button>
            {error && (
              <p className="mt-2 text-sm text-red-600">{error}</p>
            )}
          </CardContent>
        </Card>
      ) : (
        <AIGeneratedContent
          title={title}
          description={description}
          analysis={analysisResult.analysis}
          recommendations={analysisResult.recommendations}
          loading={loading}
          error={error || undefined}
          onCopy={handleCopy}
          onPrint={handlePrint}
        />
      )}
    </div>
  );
}
